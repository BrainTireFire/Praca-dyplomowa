# ---- Stage 1: Build the application ----
# Use an official Node.js LTS Alpine image as a parent image for the build stage
FROM node:23-alpine AS builder
# LTS versions like 18-alpine or 20-alpine are good choices.

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json (if you use npm) or yarn.lock (if you use yarn)
# This leverages Docker's layer caching.
COPY package*.json ./

# Install project dependencies (including devDependencies needed for the build)
# If you use yarn, change this to 'RUN yarn install --frozen-lockfile'
RUN npm install

# Copy the rest of your application's source code
COPY . .

# Run the build script defined in package.json
# This will execute "tsc && vite build"
# Vite will output the production build to the /app/dist directory
RUN npm run build

# ---- Stage 2: Serve the application with Nginx ----
# Use a lightweight Nginx Alpine image for the production stage
FROM nginx:1.28-alpine AS production
# Or any recent stable Nginx Alpine version

# Set the working directory for Nginx
WORKDIR /usr/share/nginx/html

# Remove default Nginx static assets
RUN rm -rf ./*

# Copy the built static assets from the 'builder' stage's '/app/dist' directory
# Your vite build outputs to 'dist' by default.
COPY --from=builder /app/dist .

# (Recommended for SPAs) Copy custom Nginx configuration
# Create nginx/nginx.conf in your project and uncomment the line below
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 (Nginx default port)
EXPOSE 80

# The default CMD for nginx images is usually `["nginx", "-g", "daemon off;"]`,
# which starts the Nginx server.