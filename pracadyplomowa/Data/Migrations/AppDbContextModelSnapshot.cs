// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pracadyplomowa;

#nullable disable

namespace pracadyplomowa.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.Property<int>("R_UserAttendsAsPlayerToCamgainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_UsersAttendsCampaignsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_UserAttendsAsPlayerToCamgainsId", "R_UsersAttendsCampaignsId");

                    b.HasIndex("R_UsersAttendsCampaignsId");

                    b.ToTable("CampaignUser");
                });

            modelBuilder.Entity("CharacterClassLevel", b =>
                {
                    b.Property<int>("R_CharacterHasLevelsInClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharactersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_CharacterHasLevelsInClassId", "R_CharactersId");

                    b.HasIndex("R_CharactersId");

                    b.ToTable("CharacterClassLevel");
                });

            modelBuilder.Entity("CharacterPower", b =>
                {
                    b.Property<int>("R_CharacterKnownsPowersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_PowersKnownId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_CharacterKnownsPowersId", "R_PowersKnownId");

                    b.HasIndex("R_PowersKnownId");

                    b.ToTable("CharacterPower");
                });

            modelBuilder.Entity("ChoiceGroupEffectBlueprint", b =>
                {
                    b.Property<int>("R_ChoiceGroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_EffectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_ChoiceGroupsId", "R_EffectsId");

                    b.HasIndex("R_EffectsId");

                    b.ToTable("ChoiceGroupEffectBlueprint");
                });

            modelBuilder.Entity("ChoiceGroupPower", b =>
                {
                    b.Property<int>("R_AlwaysAvailableThroughChoiceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_PowersAlwaysAvailableId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_AlwaysAvailableThroughChoiceGroupId", "R_PowersAlwaysAvailableId");

                    b.HasIndex("R_PowersAlwaysAvailableId");

                    b.ToTable("ChoiceGroupPower");
                });

            modelBuilder.Entity("ChoiceGroupPower1", b =>
                {
                    b.Property<int>("R_PowersToPrepareId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ToPrepareThroughChoiceGroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_PowersToPrepareId", "R_ToPrepareThroughChoiceGroupsId");

                    b.HasIndex("R_ToPrepareThroughChoiceGroupsId");

                    b.ToTable("ChoiceGroupPower1");
                });

            modelBuilder.Entity("ChoiceGroupUsagePower", b =>
                {
                    b.Property<int>("R_AlwaysAvailableThroughChoiceGroupUsageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_PowersAlwaysAvailableGrantedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_AlwaysAvailableThroughChoiceGroupUsageId", "R_PowersAlwaysAvailableGrantedId");

                    b.HasIndex("R_PowersAlwaysAvailableGrantedId");

                    b.ToTable("ChoiceGroupUsagePower");
                });

            modelBuilder.Entity("ChoiceGroupUsagePower1", b =>
                {
                    b.Property<int>("R_PowersToPrepareGrantedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ToPrepareThroughChoiceGroupUsageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_PowersToPrepareGrantedId", "R_ToPrepareThroughChoiceGroupUsageId");

                    b.HasIndex("R_ToPrepareThroughChoiceGroupUsageId");

                    b.ToTable("ChoiceGroupUsagePower1");
                });

            modelBuilder.Entity("ClassPower", b =>
                {
                    b.Property<int>("R_AccessiblePowersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ClassesWithAccessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_AccessiblePowersId", "R_ClassesWithAccessId");

                    b.HasIndex("R_ClassesWithAccessId");

                    b.ToTable("ClassPower");
                });

            modelBuilder.Entity("EffectGroupField", b =>
                {
                    b.Property<int>("R_EffectGroupOnFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_EffectOnFieldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_EffectGroupOnFieldId", "R_EffectOnFieldId");

                    b.HasIndex("R_EffectOnFieldId");

                    b.ToTable("EffectGroupField");
                });

            modelBuilder.Entity("EquipDataEquipmentSlot", b =>
                {
                    b.Property<int>("R_SlotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsagesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_SlotsId", "UsagesId");

                    b.HasIndex("UsagesId");

                    b.ToTable("EquipDataEquipmentSlot");
                });

            modelBuilder.Entity("EquipmentSlotItem", b =>
                {
                    b.Property<int>("R_ItemIsEquippableInSlotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_ItemIsEquippableInSlotsId", "R_ItemsId");

                    b.HasIndex("R_ItemsId");

                    b.ToTable("EquipmentSlotItem");
                });

            modelBuilder.Entity("EquipmentSlotRace", b =>
                {
                    b.Property<int>("R_EquipmentSlotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_RacesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_EquipmentSlotsId", "R_RacesId");

                    b.HasIndex("R_RacesId");

                    b.ToTable("EquipmentSlotRace");
                });

            modelBuilder.Entity("FieldPower", b =>
                {
                    b.Property<int>("R_CasterPowersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_FieldsCastingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_CasterPowersId", "R_FieldsCastingId");

                    b.HasIndex("R_FieldsCastingId");

                    b.ToTable("FieldPower");
                });

            modelBuilder.Entity("ItemPower", b =>
                {
                    b.Property<int>("R_EquipItemGrantsAccessToPowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemsGrantingPowerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_EquipItemGrantsAccessToPowerId", "R_ItemsGrantingPowerId");

                    b.HasIndex("R_ItemsGrantingPowerId");

                    b.ToTable("ItemPower");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PowerPowerSelection", b =>
                {
                    b.Property<int>("R_CharacterPreparedPowersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_PreparedPowersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_CharacterPreparedPowersId", "R_PreparedPowersId");

                    b.HasIndex("R_PreparedPowersId");

                    b.ToTable("PowerPowerSelection");
                });

            modelBuilder.Entity("PowerWeapon", b =>
                {
                    b.Property<int>("R_PowersCastedOnHitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_WeaponsCastingOnHitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("R_PowersCastedOnHitId", "R_WeaponsCastingOnHitId");

                    b.HasIndex("R_WeaponsCastingOnHitId");

                    b.ToTable("PowerWeapon");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CampaignId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CampaignId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldCoverLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldMovementCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionZ")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_BoardId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_OccupiedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_BoardId");

                    b.HasIndex("R_OccupiedById");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ParticipanceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DistanceTraveled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InitiativeOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSurprised")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfActionsTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfAttacksTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBonusActionsTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_EncounterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CharacterId");

                    b.HasIndex("R_EncounterId");

                    b.ToTable("ParticipanceDatas");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("R_CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("R_CampaignId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemInShopId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ShopHasItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_ItemInShopId");

                    b.HasIndex("R_ShopHasItemId");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberToChoose")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_GrantedByClassLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_GrantedByRaceLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_GrantedByClassLevelId");

                    b.HasIndex("R_GrantedByRaceLevelId");

                    b.ToTable("ChoiceGroups");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ChoiceGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CharacterId");

                    b.HasIndex("R_ChoiceGroupId");

                    b.ToTable("ChoiceGroupUsages");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumPreparedSpellsFormulaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpellcastingAbility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MaximumPreparedSpellsFormulaId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ClassLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitDieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HitDieId");

                    b.HasIndex("R_ClassId");

                    b.ToTable("ClassLevels");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.DiceSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_ValueEffectBlueprintId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d100")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d20")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("d8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("flat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_ValueEffectBlueprintId")
                        .IsUnique();

                    b.ToTable("DiceSet");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.DiceSet+AdditionalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Ability")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiceSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_LevelsInClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Skill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("additionalValueType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiceSetId");

                    b.HasIndex("R_LevelsInClassId");

                    b.ToTable("AdditionalValue");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.EquipData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CharacterId");

                    b.HasIndex("R_ItemId")
                        .IsUnique();

                    b.ToTable("EquipDatas");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.EquipmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EquipmentSlots");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.PowerSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CharacterId");

                    b.HasIndex("R_ClassId");

                    b.ToTable("PowerSelections");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.RaceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_RaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_RaceId");

                    b.ToTable("RaceLevels");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Backpack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Backpacks");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.ItemCostRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemFamilyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PowerId");

                    b.HasIndex("R_ItemFamilyId");

                    b.ToTable("ItemCostRequirements");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.ItemFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ItemFamilies");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.ObjectWithOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_OwnerId");

                    b.ToTable("Objects");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Aura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneratedBy_Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CenteredAtCharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CenteredAtCharacterId");

                    b.ToTable("Auras");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Conditional")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasNoEffectInCombat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsImplemented")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("R_CastedOnCharactersByAuraId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_CastedOnTilesByAuraId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_CreatedByEquippingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceAmount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Saved")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_CastedOnCharactersByAuraId");

                    b.HasIndex("R_CastedOnTilesByAuraId");

                    b.HasIndex("R_CreatedByEquippingId");

                    b.HasIndex("R_PowerId");

                    b.ToTable("EffectBlueprints");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EffectBlueprint");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DifficultyClassToBreak")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationLeft")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("R_ConcentratedOnByCharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_GeneratesAuraId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SavingThrow")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_GeneratesAuraId")
                        .IsUnique();

                    b.ToTable("EffectGroups");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Conditional")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasNoEffectInCombat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsImplemented")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemFamilyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("R_GrantedByEquippingItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_GrantedThroughId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_OwnedByGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_TargetedCharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_TargetedItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemFamilyId");

                    b.HasIndex("R_GrantedByEquippingItemId");

                    b.HasIndex("R_GrantedThroughId");

                    b.HasIndex("R_OwnedByGroupId");

                    b.HasIndex("R_TargetedCharacterId");

                    b.HasIndex("R_TargetedItemId");

                    b.ToTable("EffectInstances");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EffectInstance");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_BlueprintId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ChoiceGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_BlueprintId");

                    b.HasIndex("R_ChoiceGroupId");

                    b.ToTable("ImmaterialResourceAmounts");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceBlueprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RefreshesOn")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ImmaterialResourceBlueprints");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedsRefresh")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_BlueprintId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_ChoiceGroupUsageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("R_BlueprintId");

                    b.HasIndex("R_CharacterId");

                    b.HasIndex("R_ChoiceGroupUsageId");

                    b.HasIndex("R_ItemId");

                    b.ToTable("ImmaterialResourceInstances");
                });

            modelBuilder.Entity("pracadyplomowa.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("pracadyplomowa.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("pracadyplomowa.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Board", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SizeX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizeY")
                        .HasColumnType("INTEGER");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Campaign", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Encounter", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("R_BoardId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_CampaignId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_BoardId")
                        .IsUnique();

                    b.HasIndex("R_CampaignId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Character", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedDeathSavingThrows")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hitpoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNpc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("R_CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterBelongsToRaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_CharacterHasBackpackId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_ConcentratesOnId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_SpawnedByPowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SucceededDeathSavingThrows")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemporaryHitpoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedHitDiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_CampaignId");

                    b.HasIndex("R_CharacterBelongsToRaceId");

                    b.HasIndex("R_CharacterHasBackpackId")
                        .IsUnique();

                    b.HasIndex("R_ConcentratesOnId")
                        .IsUnique();

                    b.HasIndex("R_SpawnedByPowerId");

                    b.HasIndex("UsedHitDiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Language", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Item", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlueprint")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpellFocus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OccupiesAllSlots")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_BackpackHasItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R_ItemInItemsFamilyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_BackpackHasItemId");

                    b.HasIndex("R_ItemInItemsFamilyId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Power", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.ObjectWithOwner");

                    b.Property<int?>("AreaShape")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuraSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CastableBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DifficultyClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsImplemented")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMagic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRanged")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTargets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTargetsToExclude")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OverrideCastersDC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_ClassForUpcastingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("R_UsesImmaterialResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredActionType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresConcentration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SavingThrow")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SavingThrowBehaviour")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SavingThrowRoll")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SomaticComponent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpcastBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VerbalComponent")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_ClassForUpcastingId");

                    b.HasIndex("R_UsesImmaterialResourceId");

                    b.ToTable("Powers");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.DummyEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.HasDiscriminator().HasValue("DummyEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.LanguageEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.Property<int>("R_LanguageId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_LanguageId");

                    b.HasDiscriminator().HasValue("LanguageEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.MovementCostEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.HasDiscriminator().HasValue("MovementCostEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.OffHandAttackEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.HasDiscriminator().HasValue("OffHandAttackEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ProficiencyEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.Property<int?>("R_GrantsProficiencyInItemFamilyId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_GrantsProficiencyInItemFamilyId");

                    b.HasDiscriminator().HasValue("ProficiencyEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ResistanceEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.HasDiscriminator().HasValue("ResistanceEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.StatusEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.HasDiscriminator().HasValue("StatusEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprint");

                    b.Property<int>("DiceSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RollMoment")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("ValueEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.LanguageEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.Property<int>("R_LanguageId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_LanguageId");

                    b.HasDiscriminator().HasValue("LanguageEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstances.DummyEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.HasDiscriminator().HasValue("DummyEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstances.OffHandAttackEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.HasDiscriminator().HasValue("OffHandAttackEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.MovementCostEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.HasDiscriminator().HasValue("MovementCostEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ProficiencyEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.Property<int?>("R_GrantsProficiencyInItemFamilyId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("R_GrantsProficiencyInItemFamilyId");

                    b.HasDiscriminator().HasValue("ProficiencyEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ResistanceEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.HasDiscriminator().HasValue("ResistanceEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.StatusEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.HasDiscriminator().HasValue("StatusEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectInstance");

                    b.Property<int>("DiceSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RollerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DiceSetId");

                    b.HasIndex("RollerId");

                    b.HasDiscriminator().HasValue("ValueEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Apparel", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Items.Item");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StealthDisadvantage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthRequirement")
                        .HasColumnType("INTEGER");

                    b.ToTable("Apparels");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Tool", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Items.Item");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Weapon", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Items.Item");

                    b.Property<int>("DamageType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageValueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeaponWeight")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DamageValueId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AbilityEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("AbilityEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ActionEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("ActionEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ArmorClassEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("ArmorClassEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AttackPerAttackActionEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("AttackPerAttackActionEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AttackRollEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("AttackRollEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.DamageEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("DamageEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.HealingEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("HealingEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.HitpointEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("HitpointEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.InitiativeEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("InitiativeEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.MagicEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("MagicEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.MovementEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("MovementEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SavingThrowEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("SavingThrowEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SizeEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("SizeEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SkillEffectBlueprint", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint");

                    b.HasDiscriminator().HasValue("SkillEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AbilityEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("AbilityEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ActionEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("ActionEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AttackPerAttackActionEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("AttackPerAttackActionEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AttackRollEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("AttackRollEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.DamageEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.Property<bool>("CriticalHit")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("DamageEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstances.ArmorClassEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("ArmorClassEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstances.HealingEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("HealingEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.HitpointEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("HitpointEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.MovementEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("MovementEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SavingThrowEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("SavingThrowEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SizeEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("SizeEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SkillEffectInstance", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance");

                    b.HasDiscriminator().HasValue("SkillEffectInstance");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.MeleeWeapon", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Items.Weapon");

                    b.Property<bool>("Finesse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reach")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thrown")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Versatile")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersatileDamageValueId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("VersatileDamageValueId");

                    b.ToTable("MeleeWeapons");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.RangedWeapon", b =>
                {
                    b.HasBaseType("pracadyplomowa.Models.Entities.Items.Weapon");

                    b.Property<bool>("IsReloaded")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Loaded")
                        .HasColumnType("INTEGER");

                    b.ToTable("RangedWeapons");
                });

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Campaign", null)
                        .WithMany()
                        .HasForeignKey("R_UserAttendsAsPlayerToCamgainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.User", null)
                        .WithMany()
                        .HasForeignKey("R_UsersAttendsCampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterClassLevel", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ClassLevel", null)
                        .WithMany()
                        .HasForeignKey("R_CharacterHasLevelsInClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("R_CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterPower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("R_CharacterKnownsPowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersKnownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceGroupEffectBlueprint", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", null)
                        .WithMany()
                        .HasForeignKey("R_ChoiceGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.EffectBlueprint", null)
                        .WithMany()
                        .HasForeignKey("R_EffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceGroupPower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", null)
                        .WithMany()
                        .HasForeignKey("R_AlwaysAvailableThroughChoiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersAlwaysAvailableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceGroupPower1", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersToPrepareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", null)
                        .WithMany()
                        .HasForeignKey("R_ToPrepareThroughChoiceGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceGroupUsagePower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", null)
                        .WithMany()
                        .HasForeignKey("R_AlwaysAvailableThroughChoiceGroupUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersAlwaysAvailableGrantedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceGroupUsagePower1", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersToPrepareGrantedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", null)
                        .WithMany()
                        .HasForeignKey("R_ToPrepareThroughChoiceGroupUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassPower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_AccessiblePowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Class", null)
                        .WithMany()
                        .HasForeignKey("R_ClassesWithAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EffectGroupField", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.EffectGroup", null)
                        .WithMany()
                        .HasForeignKey("R_EffectGroupOnFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Field", null)
                        .WithMany()
                        .HasForeignKey("R_EffectOnFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipDataEquipmentSlot", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.EquipmentSlot", null)
                        .WithMany()
                        .HasForeignKey("R_SlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.EquipData", null)
                        .WithMany()
                        .HasForeignKey("UsagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentSlotItem", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.EquipmentSlot", null)
                        .WithMany()
                        .HasForeignKey("R_ItemIsEquippableInSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("R_ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentSlotRace", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.EquipmentSlot", null)
                        .WithMany()
                        .HasForeignKey("R_EquipmentSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Race", null)
                        .WithMany()
                        .HasForeignKey("R_RacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldPower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_CasterPowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Field", null)
                        .WithMany()
                        .HasForeignKey("R_FieldsCastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemPower", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_EquipItemGrantsAccessToPowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("R_ItemsGrantingPowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("pracadyplomowa.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("pracadyplomowa.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("pracadyplomowa.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("pracadyplomowa.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PowerPowerSelection", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.PowerSelection", null)
                        .WithMany()
                        .HasForeignKey("R_CharacterPreparedPowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PreparedPowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PowerWeapon", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", null)
                        .WithMany()
                        .HasForeignKey("R_PowersCastedOnHitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Weapon", null)
                        .WithMany()
                        .HasForeignKey("R_WeaponsCastingOnHitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ActionLog", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Campaign", "R_Campaign")
                        .WithMany("R_Log")
                        .HasForeignKey("R_CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Campaign");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Field", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Board", "R_Board")
                        .WithMany("R_ConsistsOfFields")
                        .HasForeignKey("R_BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.ParticipanceData", "R_OccupiedBy")
                        .WithMany("R_OccupiedFields")
                        .HasForeignKey("R_OccupiedById");

                    b.Navigation("R_Board");

                    b.Navigation("R_OccupiedBy");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ParticipanceData", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_Character")
                        .WithMany("R_CharactersParticipatesInEncounters")
                        .HasForeignKey("R_CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Encounter", "R_Encounter")
                        .WithMany("R_Participances")
                        .HasForeignKey("R_EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Character");

                    b.Navigation("R_Encounter");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Shop", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Campaign", "R_Campaign")
                        .WithMany("R_CampaignHasShops")
                        .HasForeignKey("R_CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Campaign");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ShopItem", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Shop", "R_ItemInShop")
                        .WithMany("R_Items")
                        .HasForeignKey("R_ItemInShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_ShopHasItem")
                        .WithMany("R_ItemInShops")
                        .HasForeignKey("R_ShopHasItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pracadyplomowa.Models.Entities.Items.CoinSack", "Price", b1 =>
                        {
                            b1.Property<int>("ShopItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CopperPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("GoldPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SilverPieces")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ShopItemId");

                            b1.ToTable("ShopItems");

                            b1.WithOwner()
                                .HasForeignKey("ShopItemId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("R_ItemInShop");

                    b.Navigation("R_ShopHasItem");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ClassLevel", "R_GrantedByClassLevel")
                        .WithMany("R_ChoiceGroups")
                        .HasForeignKey("R_GrantedByClassLevelId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.RaceLevel", "R_GrantedByRaceLevel")
                        .WithMany("R_ChoiceGroups")
                        .HasForeignKey("R_GrantedByRaceLevelId");

                    b.Navigation("R_GrantedByClassLevel");

                    b.Navigation("R_GrantedByRaceLevel");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_Character")
                        .WithMany("R_UsedChoiceGroups")
                        .HasForeignKey("R_CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", "R_ChoiceGroup")
                        .WithMany("R_UsageInstances")
                        .HasForeignKey("R_ChoiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Character");

                    b.Navigation("R_ChoiceGroup");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Class", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "MaximumPreparedSpellsFormula")
                        .WithMany()
                        .HasForeignKey("MaximumPreparedSpellsFormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaximumPreparedSpellsFormula");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ClassLevel", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "HitDie")
                        .WithMany()
                        .HasForeignKey("HitDieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Class", "R_Class")
                        .WithMany("R_ClassLevels")
                        .HasForeignKey("R_ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HitDie");

                    b.Navigation("R_Class");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.DiceSet", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint", "R_ValueEffectBlueprint")
                        .WithOne("DiceSet")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.DiceSet", "R_ValueEffectBlueprintId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("R_ValueEffectBlueprint");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.DiceSet+AdditionalValue", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", null)
                        .WithMany("additionalValues")
                        .HasForeignKey("DiceSetId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Class", "R_LevelsInClass")
                        .WithMany()
                        .HasForeignKey("R_LevelsInClassId");

                    b.Navigation("R_LevelsInClass");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.EquipData", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_Character")
                        .WithMany("R_EquippedItems")
                        .HasForeignKey("R_CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_Item")
                        .WithOne("R_EquipData")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.EquipData", "R_ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Character");

                    b.Navigation("R_Item");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.PowerSelection", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_Character")
                        .WithMany("R_PowersPrepared")
                        .HasForeignKey("R_CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Class", "R_Class")
                        .WithMany("R_PowerSelections")
                        .HasForeignKey("R_ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Character");

                    b.Navigation("R_Class");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.RaceLevel", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Race", "R_Race")
                        .WithMany("R_RaceLevels")
                        .HasForeignKey("R_RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Race");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.ItemCostRequirement", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", "R_Power")
                        .WithMany("R_ItemsCostRequirement")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.ItemFamily", "R_ItemFamily")
                        .WithMany("R_RequiredAmountsForPowers")
                        .HasForeignKey("R_ItemFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pracadyplomowa.Models.Entities.Items.CoinSack", "Worth", b1 =>
                        {
                            b1.Property<int>("ItemCostRequirementId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CopperPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("GoldPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SilverPieces")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ItemCostRequirementId");

                            b1.ToTable("ItemCostRequirements");

                            b1.WithOwner()
                                .HasForeignKey("ItemCostRequirementId");
                        });

                    b.Navigation("R_ItemFamily");

                    b.Navigation("R_Power");

                    b.Navigation("Worth")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.ObjectWithOwner", b =>
                {
                    b.HasOne("pracadyplomowa.User", "R_Owner")
                        .WithMany("R_Objects")
                        .HasForeignKey("R_OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("R_Owner");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Aura", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_CenteredAtCharacter")
                        .WithMany("R_AuraCenteredAtCharacter")
                        .HasForeignKey("R_CenteredAtCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_CenteredAtCharacter");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprint", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Aura", "R_CastedOnCharactersByAura")
                        .WithMany("R_EffectsOnCharactersInRange")
                        .HasForeignKey("R_CastedOnCharactersByAuraId");

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Aura", "R_CastedOnTilesByAura")
                        .WithMany("R_EffectsOnTilesInRange")
                        .HasForeignKey("R_CastedOnTilesByAuraId");

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_CreatedByEquipping")
                        .WithMany()
                        .HasForeignKey("R_CreatedByEquippingId");

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", "R_Power")
                        .WithMany("R_EffectBlueprints")
                        .HasForeignKey("R_PowerId");

                    b.Navigation("R_CastedOnCharactersByAura");

                    b.Navigation("R_CastedOnTilesByAura");

                    b.Navigation("R_CreatedByEquipping");

                    b.Navigation("R_Power");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectGroup", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Aura", "R_GeneratesAura")
                        .WithOne("R_GeneratedBy")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Powers.EffectGroup", "R_GeneratesAuraId");

                    b.Navigation("R_GeneratesAura");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectInstance", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.ItemFamily", null)
                        .WithMany("R_ProficiencyGrantedByEffectInstance")
                        .HasForeignKey("ItemFamilyId");

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_GrantedByEquippingItem")
                        .WithMany("R_EffectsOnEquip")
                        .HasForeignKey("R_GrantedByEquippingItemId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", "R_GrantedThrough")
                        .WithMany("R_EffectsGranted")
                        .HasForeignKey("R_GrantedThroughId");

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.EffectGroup", "R_OwnedByGroup")
                        .WithMany("R_OwnedEffects")
                        .HasForeignKey("R_OwnedByGroupId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_TargetedCharacter")
                        .WithMany("R_AffectedBy")
                        .HasForeignKey("R_TargetedCharacterId");

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_TargetedItem")
                        .WithMany("R_AffectedBy")
                        .HasForeignKey("R_TargetedItemId");

                    b.Navigation("R_GrantedByEquippingItem");

                    b.Navigation("R_GrantedThrough");

                    b.Navigation("R_OwnedByGroup");

                    b.Navigation("R_TargetedCharacter");

                    b.Navigation("R_TargetedItem");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceAmount", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceBlueprint", "R_Blueprint")
                        .WithMany("R_Amounts")
                        .HasForeignKey("R_BlueprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", "R_ChoiceGroup")
                        .WithMany("R_Resources")
                        .HasForeignKey("R_ChoiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("R_Blueprint");

                    b.Navigation("R_ChoiceGroup");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceInstance", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceBlueprint", "R_Blueprint")
                        .WithMany("R_Instances")
                        .HasForeignKey("R_BlueprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "R_Character")
                        .WithMany("R_ImmaterialResourceInstances")
                        .HasForeignKey("R_CharacterId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", "R_ChoiceGroupUsage")
                        .WithMany("R_ResourcesGranted")
                        .HasForeignKey("R_ChoiceGroupUsageId");

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", "R_Item")
                        .WithMany("R_ItemGrantsResources")
                        .HasForeignKey("R_ItemId");

                    b.Navigation("R_Blueprint");

                    b.Navigation("R_Character");

                    b.Navigation("R_ChoiceGroupUsage");

                    b.Navigation("R_Item");
                });

            modelBuilder.Entity("pracadyplomowa.UserRole", b =>
                {
                    b.HasOne("pracadyplomowa.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Board", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Campaign.Board", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Campaign", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Campaign.Campaign", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Encounter", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Campaign.Encounter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Board", "R_Board")
                        .WithOne("R_Encounter")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Campaign.Encounter", "R_BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Campaign", "R_Campaign")
                        .WithMany("R_CampaignHasEncounters")
                        .HasForeignKey("R_CampaignId");

                    b.Navigation("R_Board");

                    b.Navigation("R_Campaign");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Character", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.Character", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Campaign.Campaign", "R_Campaign")
                        .WithMany("R_CampaignHasCharacters")
                        .HasForeignKey("R_CampaignId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Race", "R_CharacterBelongsToRace")
                        .WithMany("R_Characters")
                        .HasForeignKey("R_CharacterBelongsToRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Backpack", "R_CharacterHasBackpack")
                        .WithOne("R_BackpackOfCharacter")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.Character", "R_CharacterHasBackpackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.EffectGroup", "R_ConcentratesOn")
                        .WithOne("R_ConcentratedOnByCharacter")
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.Character", "R_ConcentratesOnId");

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.Power", "R_SpawnedByPower")
                        .WithMany("R_SpawnedCharacters")
                        .HasForeignKey("R_SpawnedByPowerId");

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "UsedHitDice")
                        .WithMany()
                        .HasForeignKey("UsedHitDiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.User", null)
                        .WithMany("R_UserHasCharacters")
                        .HasForeignKey("UserId");

                    b.Navigation("R_Campaign");

                    b.Navigation("R_CharacterBelongsToRace");

                    b.Navigation("R_CharacterHasBackpack");

                    b.Navigation("R_ConcentratesOn");

                    b.Navigation("R_SpawnedByPower");

                    b.Navigation("UsedHitDice");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Language", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Characters.Language", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Item", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Backpack", "R_BackpackHasItem")
                        .WithMany("R_BackpackHasItems")
                        .HasForeignKey("R_BackpackHasItemId");

                    b.HasOne("pracadyplomowa.Models.Entities.Items.ItemFamily", "R_ItemInItemsFamily")
                        .WithMany("R_ItemFamilyInItems")
                        .HasForeignKey("R_ItemInItemsFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pracadyplomowa.Models.Entities.Items.CoinSack", "Price", b1 =>
                        {
                            b1.Property<int>("ItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CopperPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("GoldPieces")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SilverPieces")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ItemId");

                            b1.ToTable("Items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("R_BackpackHasItem");

                    b.Navigation("R_ItemInItemsFamily");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Power", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.ObjectWithOwner", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Powers.Power", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Class", "R_ClassForUpcasting")
                        .WithMany("R_UsedForUpcastingOfPowers")
                        .HasForeignKey("R_ClassForUpcastingId");

                    b.HasOne("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceBlueprint", "R_UsesImmaterialResource")
                        .WithMany("R_PowersRequiringThis")
                        .HasForeignKey("R_UsesImmaterialResourceId");

                    b.Navigation("R_ClassForUpcasting");

                    b.Navigation("R_UsesImmaterialResource");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.LanguageEffectBlueprint", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Language", "R_Language")
                        .WithMany("R_EffectBlueprints")
                        .HasForeignKey("R_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.LanguageEffectType", "LanguageEffectType", b1 =>
                        {
                            b1.Property<int>("LanguageEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("LanguageEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("LanguageEffectBlueprintId");
                        });

                    b.Navigation("LanguageEffectType")
                        .IsRequired();

                    b.Navigation("R_Language");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.MovementCostEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.MovementCostEffectType", "MovementCostEffectType", b1 =>
                        {
                            b1.Property<int>("MovementCostEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MovementCostEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MovementCostEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("MovementCostEffectBlueprintId");
                        });

                    b.Navigation("MovementCostEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ProficiencyEffectBlueprint", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.ItemFamily", "R_GrantsProficiencyInItemFamily")
                        .WithMany("R_ProficiencyGrantedByEffectBlueprint")
                        .HasForeignKey("R_GrantsProficiencyInItemFamilyId");

                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ProficiencyEffectType", "ProficiencyEffectType", b1 =>
                        {
                            b1.Property<int>("ProficiencyEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ItemType")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ProficiencyEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ProficiencyEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("ProficiencyEffectBlueprintId");
                        });

                    b.Navigation("ProficiencyEffectType")
                        .IsRequired();

                    b.Navigation("R_GrantsProficiencyInItemFamily");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ResistanceEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ResistanceEffectType", "ResistanceEffectType", b1 =>
                        {
                            b1.Property<int>("ResistanceEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ResistanceEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ResistanceEffect_DamageType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ResistanceEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("ResistanceEffectBlueprintId");
                        });

                    b.Navigation("ResistanceEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.StatusEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.StatusEffectType", "StatusEffectType", b1 =>
                        {
                            b1.Property<int>("StatusEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("StatusEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("StatusEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("StatusEffectBlueprintId");
                        });

                    b.Navigation("StatusEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.LanguageEffectInstance", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Language", "R_Language")
                        .WithMany("R_EffectInstances")
                        .HasForeignKey("R_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.LanguageEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("LanguageEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("LanguageEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("LanguageEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();

                    b.Navigation("R_Language");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.MovementCostEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.MovementCostEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("MovementCostEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MovementCostEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MovementCostEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("MovementCostEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ProficiencyEffectInstance", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.ItemFamily", "R_GrantsProficiencyInItemFamily")
                        .WithMany()
                        .HasForeignKey("R_GrantsProficiencyInItemFamilyId");

                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ProficiencyEffectType", "ProficiencyEffectType", b1 =>
                        {
                            b1.Property<int>("ProficiencyEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ItemType")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ProficiencyEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ProficiencyEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("ProficiencyEffectInstanceId");
                        });

                    b.Navigation("ProficiencyEffectType")
                        .IsRequired();

                    b.Navigation("R_GrantsProficiencyInItemFamily");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ResistanceEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ResistanceEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("ResistanceEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ResistanceEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ResistanceEffect_DamageType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ResistanceEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("ResistanceEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.StatusEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.StatusEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("StatusEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("StatusEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("StatusEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("StatusEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ValueEffectInstance", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "DiceSet")
                        .WithMany()
                        .HasForeignKey("DiceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.Character", "Roller")
                        .WithMany()
                        .HasForeignKey("RollerId");

                    b.Navigation("DiceSet");

                    b.Navigation("Roller");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Apparel", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.Apparel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Tool", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.Tool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Weapon", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "DamageValue")
                        .WithMany()
                        .HasForeignKey("DamageValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Items.Item", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.Weapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageValue");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AbilityEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AbilityEffectType", "AbilityEffectType", b1 =>
                        {
                            b1.Property<int>("AbilityEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AbilityEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AbilityEffect_Ability")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AbilityEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("AbilityEffectBlueprintId");
                        });

                    b.Navigation("AbilityEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ActionEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ActionEffectType", "ActionEffectType", b1 =>
                        {
                            b1.Property<int>("ActionEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ActionEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ActionEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("ActionEffectBlueprintId");
                        });

                    b.Navigation("ActionEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AttackPerAttackActionEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AttackPerAttackActionEffectType", "AttackPerAttackActionEffectType", b1 =>
                        {
                            b1.Property<int>("AttackPerAttackActionEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackPerActionEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AttackPerAttackActionEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("AttackPerAttackActionEffectBlueprintId");
                        });

                    b.Navigation("AttackPerAttackActionEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.AttackRollEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AttackRollEffectType", "AttackRollEffectType", b1 =>
                        {
                            b1.Property<int>("AttackRollEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Range")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Source")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Type")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AttackRollEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("AttackRollEffectBlueprintId");
                        });

                    b.Navigation("AttackRollEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.DamageEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.DamageEffectType", "DamageEffectType", b1 =>
                        {
                            b1.Property<int>("DamageEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DamageEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("DamageEffect_DamageType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DamageEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("DamageEffectBlueprintId");
                        });

                    b.Navigation("DamageEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.HitpointEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.HitpointEffectType", "HitpointEffectType", b1 =>
                        {
                            b1.Property<int>("HitpointEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("HitpointEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("HitpointEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("HitpointEffectBlueprintId");
                        });

                    b.Navigation("HitpointEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.MovementEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.MovementEffectType", "MovementEffectType", b1 =>
                        {
                            b1.Property<int>("MovementEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MovementEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MovementEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("MovementEffectBlueprintId");
                        });

                    b.Navigation("MovementEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SavingThrowEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SavingThrowEffectType", "SavingThrowEffectType", b1 =>
                        {
                            b1.Property<int>("SavingThrowEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SavingThrowEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Ability")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Condition")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Nature")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SavingThrowEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("SavingThrowEffectBlueprintId");
                        });

                    b.Navigation("SavingThrowEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SizeEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SizeEffectType", "SizeEffectType", b1 =>
                        {
                            b1.Property<int>("SizeEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SizeEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SizeEffect_SizeToSet")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SizeEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("SizeEffectBlueprintId");
                        });

                    b.Navigation("SizeEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.SkillEffectBlueprint", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SkillEffectType", "SkillEffectType", b1 =>
                        {
                            b1.Property<int>("SkillEffectBlueprintId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SkillEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SkillEffect_Skill")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SkillEffectBlueprintId");

                            b1.ToTable("EffectBlueprints");

                            b1.WithOwner()
                                .HasForeignKey("SkillEffectBlueprintId");
                        });

                    b.Navigation("SkillEffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AbilityEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AbilityEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("AbilityEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AbilityEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AbilityEffect_Ability")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AbilityEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("AbilityEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ActionEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.ActionEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("ActionEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ActionEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ActionEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("ActionEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AttackPerAttackActionEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AttackPerAttackActionEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("AttackPerAttackActionEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackPerActionEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AttackPerAttackActionEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("AttackPerAttackActionEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.AttackRollEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.AttackRollEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("AttackRollEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Range")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Source")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AttackRollEffect_Type")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AttackRollEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("AttackRollEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.DamageEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.DamageEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("DamageEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DamageEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("DamageEffect_DamageType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DamageEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("DamageEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.HitpointEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.HitpointEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("HitpointEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("HitpointEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("HitpointEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("HitpointEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.MovementEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.MovementEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("MovementEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MovementEffect")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MovementEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("MovementEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SavingThrowEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SavingThrowEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("SavingThrowEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SavingThrowEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Ability")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Condition")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("SavingThrowEffect_Nature")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SavingThrowEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("SavingThrowEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SizeEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SizeEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("SizeEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SizeEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SizeEffect_SizeToSet")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SizeEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("SizeEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.SkillEffectInstance", b =>
                {
                    b.OwnsOne("pracadyplomowa.Models.ComplexTypes.Effects.SkillEffectType", "EffectType", b1 =>
                        {
                            b1.Property<int>("SkillEffectInstanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SkillEffect")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SkillEffect_Skill")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SkillEffectInstanceId");

                            b1.ToTable("EffectInstances");

                            b1.WithOwner()
                                .HasForeignKey("SkillEffectInstanceId");
                        });

                    b.Navigation("EffectType")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.MeleeWeapon", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.Weapon", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.MeleeWeapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pracadyplomowa.Models.Entities.Characters.DiceSet", "VersatileDamageValue")
                        .WithMany()
                        .HasForeignKey("VersatileDamageValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersatileDamageValue");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.RangedWeapon", b =>
                {
                    b.HasOne("pracadyplomowa.Models.Entities.Items.Weapon", null)
                        .WithOne()
                        .HasForeignKey("pracadyplomowa.Models.Entities.Items.RangedWeapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.ParticipanceData", b =>
                {
                    b.Navigation("R_OccupiedFields");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Shop", b =>
                {
                    b.Navigation("R_Items");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroup", b =>
                {
                    b.Navigation("R_Resources");

                    b.Navigation("R_UsageInstances");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ChoiceGroupUsage", b =>
                {
                    b.Navigation("R_EffectsGranted");

                    b.Navigation("R_ResourcesGranted");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Class", b =>
                {
                    b.Navigation("R_ClassLevels");

                    b.Navigation("R_PowerSelections");

                    b.Navigation("R_UsedForUpcastingOfPowers");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.ClassLevel", b =>
                {
                    b.Navigation("R_ChoiceGroups");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.DiceSet", b =>
                {
                    b.Navigation("additionalValues");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Race", b =>
                {
                    b.Navigation("R_Characters");

                    b.Navigation("R_RaceLevels");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.RaceLevel", b =>
                {
                    b.Navigation("R_ChoiceGroups");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Backpack", b =>
                {
                    b.Navigation("R_BackpackHasItems");

                    b.Navigation("R_BackpackOfCharacter")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.ItemFamily", b =>
                {
                    b.Navigation("R_ItemFamilyInItems");

                    b.Navigation("R_ProficiencyGrantedByEffectBlueprint");

                    b.Navigation("R_ProficiencyGrantedByEffectInstance");

                    b.Navigation("R_RequiredAmountsForPowers");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Aura", b =>
                {
                    b.Navigation("R_EffectsOnCharactersInRange");

                    b.Navigation("R_EffectsOnTilesInRange");

                    b.Navigation("R_GeneratedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectGroup", b =>
                {
                    b.Navigation("R_ConcentratedOnByCharacter");

                    b.Navigation("R_OwnedEffects");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.ImmaterialResourceBlueprint", b =>
                {
                    b.Navigation("R_Amounts");

                    b.Navigation("R_Instances");

                    b.Navigation("R_PowersRequiringThis");
                });

            modelBuilder.Entity("pracadyplomowa.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("pracadyplomowa.User", b =>
                {
                    b.Navigation("R_Objects");

                    b.Navigation("R_UserHasCharacters");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Board", b =>
                {
                    b.Navigation("R_ConsistsOfFields");

                    b.Navigation("R_Encounter");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Campaign", b =>
                {
                    b.Navigation("R_CampaignHasCharacters");

                    b.Navigation("R_CampaignHasEncounters");

                    b.Navigation("R_CampaignHasShops");

                    b.Navigation("R_Log");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Campaign.Encounter", b =>
                {
                    b.Navigation("R_Participances");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Character", b =>
                {
                    b.Navigation("R_AffectedBy");

                    b.Navigation("R_AuraCenteredAtCharacter");

                    b.Navigation("R_CharactersParticipatesInEncounters");

                    b.Navigation("R_EquippedItems");

                    b.Navigation("R_ImmaterialResourceInstances");

                    b.Navigation("R_PowersPrepared");

                    b.Navigation("R_UsedChoiceGroups");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Characters.Language", b =>
                {
                    b.Navigation("R_EffectBlueprints");

                    b.Navigation("R_EffectInstances");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Items.Item", b =>
                {
                    b.Navigation("R_AffectedBy");

                    b.Navigation("R_EffectsOnEquip");

                    b.Navigation("R_EquipData");

                    b.Navigation("R_ItemGrantsResources");

                    b.Navigation("R_ItemInShops");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.Power", b =>
                {
                    b.Navigation("R_EffectBlueprints");

                    b.Navigation("R_ItemsCostRequirement");

                    b.Navigation("R_SpawnedCharacters");
                });

            modelBuilder.Entity("pracadyplomowa.Models.Entities.Powers.EffectBlueprints.ValueEffectBlueprint", b =>
                {
                    b.Navigation("DiceSet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
